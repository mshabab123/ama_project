public class neuralClass {

	

public static double getNeural(double y1[]){

		


		 
		 
		double[] x1_step1_xoffset = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		double[] x1_step1_gain = { 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
				0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
				0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4 };

		double b1 = -0.90199086912989901;

		double[] IW1_1 = {

		0.014971382, 0.020241656, 0.006865593, 0.00107539, 0.001289415,
				1.769771999, -0.002697477, 0.011282702, 0.096726327,
				0.002782329, 0.011529837, -0.010491586, 0.015299157,
				0.005055956, -0.002594944, 0.033875653, -0.006916658,
				0.006500189, 7.93E-05, -0.013625573, -0.006226655,
				-0.002623564, -0.014198919, -0.007480559, -0.010915889,
				-0.009028143, -0.011529224, -0.005948637

		};

		double b2 = 0.37909772804126646;
		double LW2_1 = 0.61292836451938648;

		double[] y = new double[28];

		for (int i = 0; i < 28; i++) {
			y[i] = y1[i] - x1_step1_xoffset[i];
			y[i] = y[i] * x1_step1_gain[i];
			y[i] = y[i] - 1;
		}

		double sumIWy = 0;
		for (int i = 0; i < 28; i++) {

			sumIWy += IW1_1[i] * y[i];

		}

		double a = b1 + sumIWy;

		double a1 = 2 / (1 + Math.exp(-2 * a)) - 1;

		double a2 = b2 + LW2_1 * a1;

		double result = a2 + 1;
		result = result / 0.53024940280661;

		result = result + 1.22819;

		return result;

	}

}
